namespace Live2DCSharpSDK.Framework.Rendering.OpenGL;

public abstract class OpenGLApi
{
    public const string CSM_FRAGMENT_SHADER_FP_PRECISION_HIGH = "highp";
    public const string CSM_FRAGMENT_SHADER_FP_PRECISION_MID = "mediump";
    public const string CSM_FRAGMENT_SHADER_FP_PRECISION_LOW = "lowp";

    public const string CSM_FRAGMENT_SHADER_FP_PRECISION = CSM_FRAGMENT_SHADER_FP_PRECISION_HIGH;

    public abstract bool IsES2 { get; }

    public int GL_FALSE = 0;
    public int GL_ZERO = 0;
    public int GL_ONE = 1;
    public int GL_TRIANGLES = 0x0004;
    public int GL_DEPTH_BUFFER_BIT = 0x0100;
    public int GL_ONE_MINUS_SRC_COLOR = 0x0301;
    public int GL_SRC_ALPHA = 0x0302;
    public int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    public int GL_DST_COLOR = 0x0306;
    public int GL_CCW = 0x0901;
    public int GL_CULL_FACE = 0x0B44;
    public int GL_FRONT_FACE = 0x0B46;
    public int GL_DEPTH_TEST = 0x0B71;
    public int GL_STENCIL_TEST = 0x0B90;
    public int GL_VIEWPORT = 0x0BA2;
    public int GL_BLEND = 0x0BE2;
    public int GL_SCISSOR_TEST = 0x0C11;
    public int GL_COLOR_WRITEMASK = 0x0C23;
    public int GL_TEXTURE_2D = 0x0DE1;
    public int GL_UNSIGNED_BYTE = 0x1401;
    public int GL_UNSIGNED_SHORT = 0x1403;
    public int GL_FLOAT = 0x1406;
    public int GL_RGBA = 0x1908;
    public int GL_LINEAR = 0x2601;
    public int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    public int GL_TEXTURE_MAG_FILTER = 0x2800;
    public int GL_TEXTURE_MIN_FILTER = 0x2801;
    public int GL_TEXTURE_WRAP_S = 0x2802;
    public int GL_TEXTURE_WRAP_T = 0x2803;
    public int GL_COLOR_BUFFER_BIT = 0x4000;
    public int GL_TEXTURE_BINDING_2D = 0x8069;
    public int GL_BLEND_DST_RGB = 0x80C8;
    public int GL_BLEND_SRC_RGB = 0x80C9;
    public int GL_BLEND_DST_ALPHA = 0x80CA;
    public int GL_BLEND_SRC_ALPHA = 0x80CB;
    public int GL_CLAMP_TO_EDGE = 0x812F;
    public int GL_TEXTURE0 = 0x84C0;
    public int GL_TEXTURE1 = 0x84C1;
    public int GL_ACTIVE_TEXTURE = 0x84E0;
    public int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
    public int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    public int GL_ARRAY_BUFFER = 0x8892;
    public int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    public int GL_ARRAY_BUFFER_BINDING = 0x8894;
    public int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    public int GL_FRAGMENT_SHADER = 0x8B30;
    public int GL_VERTEX_SHADER = 0x8B31;
    public int GL_COMPILE_STATUS = 0x8B81;
    public int GL_LINK_STATUS = 0x8B82;
    public int GL_VALIDATE_STATUS = 0x8B83;
    public int GL_INFO_LOG_LENGTH = 0x8B84;
    public int GL_CURRENT_PROGRAM = 0x8B8D;
    public int GL_FRAMEBUFFER_BINDING = 0x8CA6;
    public int GL_COLOR_ATTACHMENT0 = 0x8CE0;
    public int GL_FRAMEBUFFER = 0x8D40;

    public abstract void glViewport(int x, int y, int w, int h);
    public abstract void glClearColor(float r, float g, float b, float a);
    public abstract void glClear(int bit);
    public abstract void glEnable(int bit);
    public abstract void glDisable(int bit);
    public abstract void glEnableVertexAttribArray(int index);
    public abstract void glDisableVertexAttribArray(int index);
    public abstract unsafe void glGetIntegerv(int bit, int* data);
    public abstract void glActiveTexture(int bit);
    public abstract unsafe void glGetVertexAttribiv(int index, int bit, int* data);
    public abstract bool glIsEnabled(int bit);
    public abstract void glGetBooleanv(int bit, bool[] data);
    public abstract void glUseProgram(int index);
    public abstract void glFrontFace(int data);
    public abstract void glColorMask(bool a, bool b, bool c, bool d);
    public abstract void glBindBuffer(int bit, int index);
    public abstract void glBindTexture(int bit, int index);
    public abstract void glBlendFuncSeparate(int a, int b, int c, int d);
    public abstract void glDeleteProgram(int index);
    public abstract int glGetAttribLocation(int index, string attr);
    public abstract int glGetUniformLocation(int index, string uni);
    public abstract void glUniform1i(int index, int data);
    public abstract unsafe void glVertexAttribPointer(int index, int length, int type, bool b, int size, float* arr);
    public abstract void glUniform4f(int index, float a, float b, float c, float d);
    public abstract void glUniformMatrix4fv(int index, int length, bool b, float[] data);
    public abstract int glCreateProgram();
    public abstract void glAttachShader(int a, int b);
    public abstract void glDeleteShader(int index);
    public abstract void glDetachShader(int index, int data);
    public abstract int glCreateShader(int type);
    public abstract void glShaderSource(int a, string source);
    public abstract void glCompileShader(int index);
    public abstract unsafe void glGetShaderiv(int index, int type, int* length);
    public abstract void glGetShaderInfoLog(int index, out string log);
    public abstract void glLinkProgram(int index);
    public abstract unsafe void glGetProgramiv(int index, int type, int* length);
    public abstract unsafe void glGetProgramInfoLog(int index, out string log);
    public abstract void glValidateProgram(int index);
    public abstract unsafe void glDrawElements(int type, int count, int type1, ushort* arry);
    public abstract void glBindVertexArrayOES(int data);
    public abstract void glTexParameterf(int type, int type1, float value);
    public abstract void glBindFramebuffer(int type, int data);
    public abstract unsafe void glGenTextures(int bit, int* data);
    public abstract void glTexImage2D(int type, int a, int type1, int w, int h, int size, int type2, int type3, IntPtr data);
    public abstract void glTexParameteri(int a, int b, int c);
    public abstract unsafe void glGenFramebuffers(int size, int* data);
    public abstract void glFramebufferTexture2D(int a, int b, int c, int buff, int data);
    public abstract unsafe void glDeleteTextures(int size, int* data);
    public abstract unsafe void glDeleteFramebuffers(int size, int* data);
    public abstract void glBlendFunc(int a, int b);
    public abstract void GetWindowSize(out int w, out int h);
    public abstract void glGenerateMipmap(int a);
    public abstract void glClearDepth(float data);
    public abstract int glGetError();
}
